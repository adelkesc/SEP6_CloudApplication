@page "/checkweather/temperatures"

@using ChartJs.Blazor.ChartJS.BarChart
@using ChartJs.Blazor.ChartJS.BarChart.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.Util
@using DataAccessLibrary
@using DataAccessLibrary.Models
@using ChartJs.Blazor.ChartJS.Common.Wrappers
@using ChartJs.Blazor.ChartJS.MixedChart

@inject IModel model;

@if (data == null)
{
    <p>Loading...</p>
}
else
{

    <ChartJsBarChart @ref="_barChart"
                     Config="@_barChartConfig"
                     Width="600"
                     Height="300" />

}

@code
{
    private BarConfig _barChartConfig;
    private ChartJsBarChart _barChart;
    private BarDataset<DoubleWrapper> _barDataSet1;
    private BarDataset<DoubleWrapper> _barDataSet2;
    private BarDataset<DoubleWrapper> _barDataSet3;
    private List<FlightModel> data;

    protected async override Task OnInitializedAsync()
    {
        data = await model.TempPerOriginAsync();

        _barChartConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Simple Bar Chart"
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
        {
                        new BarCategoryAxis
                        {
                            BarThickness = BarThickness.Flex,
                            Stacked = true,
                        }
                    },
                    YAxes = new List<CartesianAxis>
        {
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                BeginAtZero = true
                            }
                        }
                    }
                }
            }
        };

        if (data != null)
        {
            _barChartConfig.Data.Labels.AddRange(data[0].GetDateFormat(data));
            _barDataSet1 = new BarDataset<DoubleWrapper>
            {
                Label = "JFK",
                BackgroundColor = ColorUtil.RandomColorString(),
                BorderWidth = 0,
                HoverBackgroundColor = ColorUtil.RandomColorString(),
                HoverBorderColor = ColorUtil.RandomColorString(),
                HoverBorderWidth = 1,
                BorderColor = "#ffffff"
            };
            var countJFK = (data[0].Temperatures(data, "JFK")).Wrap();
            _barDataSet1.AddRange(countJFK);
            _barDataSet2 = new BarDataset<DoubleWrapper>
            {
                Label = "LGA",
                BackgroundColor = ColorUtil.RandomColorString(),
                BorderWidth = 0,
                HoverBackgroundColor = ColorUtil.RandomColorString(),
                HoverBorderColor = ColorUtil.RandomColorString(),
                HoverBorderWidth = 1,
                BorderColor = "#ffffff"
            };
            var countLGA = (data[0].Temperatures(data, "LGA")).Wrap();
            _barChartConfig.Data.Datasets.Add(_barDataSet1);
            _barDataSet1.AddRange(countLGA);

            _barDataSet3 = new BarDataset<DoubleWrapper>
            {
                Label = "EWR",
                BackgroundColor = ColorUtil.RandomColorString(),
                BorderWidth = 0,
                HoverBackgroundColor = ColorUtil.RandomColorString(),
                HoverBorderColor = ColorUtil.RandomColorString(),
                HoverBorderWidth = 1,
                BorderColor = "#ffffff"
            };
            var countEWR = (data[0].Temperatures(data, "EWR")).Wrap();
            _barChartConfig.Data.Datasets.Add(_barDataSet2);
            _barDataSet1.AddRange(countEWR);

            _barChartConfig.Data.Datasets.Add(_barDataSet3);
        }
        this.StateHasChanged();
    }
}