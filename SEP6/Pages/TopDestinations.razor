@page "/topDestinations"

@using ChartJs.Blazor.ChartJS.BarChart
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.Util
@using DataAccessLibrary
@using DataAccessLibrary.Models
@using ChartJs.Blazor.ChartJS.Common.Wrappers
@using ChartJs.Blazor.ChartJS.BarChart.Axes

@inject IModel model;

<h3>Flights from the 3 Origins to the Top 10 Destinations</h3>
<br>
@if (data == null)
{
    <p>Loading...</p>
}
else
{
    <ChartJsBarChart @ref="_barChart"
                     Config="@_barChartConfig"
                     Width="600"
                     Height="300" />
    <br>
    <br>
    <h3>Mean Airtime from Each Origin</h3>
    <table class="table table-striped">

        <thead>

            <tr>

                <th>Origin</th>

                <th>Destination</th>

                <th>Mean Air Time</th>

            </tr>

        </thead>

        <tbody>

            @foreach (var flight in data)
            {
                <tr>

                    <td>@flight.Origin</td>

                    <td>@flight.Dest</td>

                    <td>@Math.Round(flight.Air_time, 2) Minutes</td>

                </tr>
            }

        </tbody>

    </table>
    <br>
    <br>
}

@code {

    private BarConfig _barChartConfig;
    private ChartJsBarChart _barChart;
    private BarDataset<DoubleWrapper> _barDataSet;
    private List<FlightModel> data;

    protected async override void OnInitialized()
    {
        data = await model.FlightsPerTopDestAsync();
        _barChartConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Total Flights Towards Top Ten Destinations"
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
{
                        new BarCategoryAxis
                        {
                            BarThickness = BarThickness.Flex
                        }
                    },
                    YAxes = new List<CartesianAxis>
{
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                BeginAtZero = true
                            }
                        }
                    }
                }
            }
        };

        if (data != null)
        {
            string[] destinations = model.TopDestinationsNames();
            _barChartConfig.Data.Labels.AddRange(destinations);

            double[] countJFK = data[0].TotalFlights(data, "JFK");
            double[] countEWR = data[0].TotalFlights(data, "EWR");
            double[] countLGA = data[0].TotalFlights(data, "LGA");

            var barSet1 = new BarDataset<DoubleWrapper>
            {
                Label = "JFK",
                BackgroundColor = "#2496cd",
                BorderWidth = 1,
                HoverBackgroundColor = "#2496cd",
                HoverBorderColor = "#2496cd",
                HoverBorderWidth = 1,
                BorderColor = "#ffffff",
            };
            barSet1.AddRange(countJFK.Wrap());
            _barChartConfig.Data.Datasets.Add(barSet1);

            var barSet2 = new BarDataset<DoubleWrapper>
            {
                Label = "EWR",
                BackgroundColor = "#702963",
                BorderWidth = 1,
                HoverBackgroundColor = "#702963",
                HoverBorderColor = "#702963",
                HoverBorderWidth = 1,
                BorderColor = "#ffffff",
            };
            barSet2.AddRange(countEWR.Wrap());
            _barChartConfig.Data.Datasets.Add(barSet2);

            var barSet3 = new BarDataset<DoubleWrapper>
            {
                Label = "LGA",
                BackgroundColor = "#9b870c",
                BorderWidth = 1,
                HoverBackgroundColor = "#9b870c",
                HoverBorderColor = "#9b870c",
                HoverBorderWidth = 1,
                BorderColor = "#ffffff",
            };
            barSet3.AddRange(countLGA.Wrap());
            _barChartConfig.Data.Datasets.Add(barSet3);
        }
        this.StateHasChanged();
    }
}
