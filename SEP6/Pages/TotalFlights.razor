@page "/totalflights"
@using ChartJs.Blazor.ChartJS.BarChart
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.Util
@using DataAccessLibrary
@using DataAccessLibrary.Models
@using ChartJs.Blazor.ChartJS.Common.Wrappers
@using ChartJs.Blazor.ChartJS.BarChart.Axes

@inject IModel model;
@if (data == null)
{
    <p>Loading...</p>
}
else
{
    <ChartJsBarChart @ref="_barChart"
                     Config="@_barChartConfig"
                     Width="600"
                     Height="300" />
}

@code {
    private BarConfig _barChartConfig;
    private ChartJsBarChart _barChart;
    private BarDataset<DoubleWrapper> _barDataSet;
    private List<FlightModel> data;

    protected async override void OnInitialized()
    {
        data = await model.NoFlightsPerMonthAsync();
        _barChartConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Total Flights per Month"
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                {
                        new BarCategoryAxis
                        {
                            BarPercentage = 0.5,
                            BarThickness = BarThickness.Flex
                        }
                    },
                    YAxes = new List<CartesianAxis>
                {
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                BeginAtZero = true
                            }
                        }
                    }
                }
            }
        };
        string[] months;
        months = new[] { "January", "February", "March", "April", "May", "June", "July", "August"
        , "September", "October", "November", "December"};
        _barChartConfig.Data.Labels.AddRange(months);

        _barDataSet = new BarDataset<DoubleWrapper>
        {
            Label = "Total Flights per Month",
            BackgroundColor = new[] { ColorUtil.RandomColorString(), ColorUtil.RandomColorString(),
                                        ColorUtil.RandomColorString(), ColorUtil.RandomColorString(),
                                        ColorUtil.RandomColorString(), ColorUtil.RandomColorString(),
                                        ColorUtil.RandomColorString(), ColorUtil.RandomColorString(),
                                        ColorUtil.RandomColorString(), ColorUtil.RandomColorString(),
                                        ColorUtil.RandomColorString(), ColorUtil.RandomColorString(),},
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };

        _barChartConfig.Data.Datasets.Add(_barDataSet);
        double[] count = data[0].CountOfFlightsPerMonth(data);
        int index = 0;
        if (data != null)
        {
            foreach (var flight in data)
            {

                _barDataSet.Add(count[index]);
                index++;
            }
        }
        this.StateHasChanged();
    }
}
