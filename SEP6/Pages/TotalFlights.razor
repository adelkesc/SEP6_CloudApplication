@page "/totalflights"

@using ChartJs.Blazor.ChartJS.BarChart
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.Util
@using DataAccessLibrary
@using DataAccessLibrary.Models
@using ChartJs.Blazor.ChartJS.Common.Wrappers

@inject IModel model;

<h3>Total Flights per Month</h3>

<div class="row">
    <button class="btn btn-primary" @onclick="AddData">Add Data</button>
</div>
<ChartJsBarChart @ref="_barChart"
                 Config="@_barChartConfig"
                 Width="600"
                 Height="300" />

<p>A graph will be here soon!</p>

<button type="button">
    Flights from 3 Origins
</button>
<br>
<a href="totalflights/meanairtravel">Mean Airtravel</a>


@code {
    private BarConfig _barChartConfig;
    private ChartJsBarChart _barChart;
    private List<FlightModel> flights;
    private BarDataset<Int32Wrapper> _barDataSet;

    private List<FlightModel> flights;
    private string[] months;

    protected override async Task OnInitializedAsync()
    {
        flights = await model.NoFlightsPerMonthAsync();
        // Note the constructor argument
        _barChartConfig = new BarConfig(ChartType.HorizontalBar)
        {
            Options = new BarOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Simple Bar Chart"
                },
                Responsive = true,
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
        {
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                AutoSkip = false,
                                Min = 0 // Otherwise the lowest value in the dataset won't be visible
                            }
                        }
                    }
                }
            }
        };
    }
