@page "/temperatures"

@using ChartJs.Blazor.ChartJS.BarChart
@using ChartJs.Blazor.ChartJS.BarChart.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.Util
@using DataAccessLibrary
@using DataAccessLibrary.Models
@using ChartJs.Blazor.ChartJS.Common.Wrappers

@inject IModel model;

<h3>Number of Weather Observations per Origin</h3>

@if (data == null && data2 == null)
{
    <p>Loading...</p>
}
else
{
    <button class="btn btn-primary" @onclick="Switch"> Switch </button>
    <table class="table table-striped text-center">
        <thead>
            <tr>
                <th>Origin</th>
                <th>Number of Weather Observations</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>JFK</td>
                <td>@countJFK.Count()</td>
            </tr>
            <tr>
                <td>LGA</td>
                <td>@countLGA.Count()</td>
            </tr>
            <tr>
                <td>EWR</td>
                <td>@countEWR.Count()</td>
            </tr>
        </tbody>
    </table>

        <ChartJsBarChart @ref="_barChart"
                         Config="@_barChartConfig"
                         Width="600"
                         Height="300" />
}

@code {
    private List<FlightModel> data;
    private List<FlightModel> data2;

    private bool change = true;

    private BarConfig _barChartConfig;
    private ChartJsBarChart _barChart;
    private BarDataset<DoubleWrapper> _barDataSet11, _barDataSet12, _barDataSet13;

    private BarConfig _barChartConfig2;
    private ChartJsBarChart _barChart2;
    private BarDataset<DoubleWrapper> _barDataSet21, _barDataSet22, _barDataSet23;

    private double[] countJFK, countLGA, countEWR;
    private double[] count1JFK, count2LGA, count3EWR;

    public Task Switch()
    {

        if (change)
        {
            _barChartConfig.Data.Labels.Clear();
            _barChartConfig.Options.Title.Text = "Daily Mean Temperatures In 2013";
            _barChartConfig.Data.Labels.AddRange(data2[0].GetMeanDateFormat(data2));
            _barChartConfig.Data.Datasets[0] = _barDataSet11;
            _barChartConfig.Data.Datasets[1] = _barDataSet12;
            _barChartConfig.Data.Datasets[2] = _barDataSet13;
        }
        else
        {
            _barChartConfig.Data.Labels.Clear();
            _barChartConfig.Options.Title.Text = "Hourly Precise Temperatures In 2013";
            _barChartConfig.Data.Labels.AddRange(data[0].GetDateFormat(data));
            _barChartConfig.Data.Datasets[0] = _barDataSet21;
            _barChartConfig.Data.Datasets[1] = _barDataSet22;
            _barChartConfig.Data.Datasets[2] = _barDataSet23;
        }
        change = !change;
        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        data = await model.TempPerOriginAsync();
        data2 = await model.MeanTempPerOriginAsync();

        _barChartConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Hourly Precise Temperatures In 2013"
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
{
                        new BarCategoryAxis
                        {
                            BarThickness = BarThickness.Flex,
                            Stacked = true,
                        }
                    },
                    YAxes = new List<CartesianAxis>
{
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                BeginAtZero = true
                            }
                        }
                    }
                }
            }
        };
        _barDataSet11 = new BarDataset<DoubleWrapper>
        {
            Label = "JFK",
            BackgroundColor = "#96ded1",
            BorderWidth = 0,
            HoverBackgroundColor = "#96ded1",
            HoverBorderColor = "#96ded1",
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };
        _barDataSet12 = new BarDataset<DoubleWrapper>
        {
            Label = "LGA",
            BackgroundColor = "#b284be",
            BorderWidth = 0,
            HoverBackgroundColor = "#b284be",
            HoverBorderColor = "#b284be",
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };
        _barDataSet13 = new BarDataset<DoubleWrapper>
        {
            Label = "EWR",
            BackgroundColor = "#02075d",
            BorderWidth = 0,
            HoverBackgroundColor = "#02075d",
            HoverBorderColor = "#02075d",
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };

        _barDataSet21 = new BarDataset<DoubleWrapper>
        {
            Label = "JFK",
            BackgroundColor = "#96ded1",
            BorderWidth = 0,
            HoverBackgroundColor = "#96ded1",
            HoverBorderColor = "#96ded1",
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };
        _barDataSet22 = new BarDataset<DoubleWrapper>
        {
            Label = "LGA",
            BackgroundColor = "#b284be",
            BorderWidth = 0,
            HoverBackgroundColor = "#b284be",
            HoverBorderColor = "#b284be",
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };
        _barDataSet23 = new BarDataset<DoubleWrapper>
        {
            Label = "EWR",
            BackgroundColor = "#02075d",
            BorderWidth = 0,
            HoverBackgroundColor = "#02075d",
            HoverBorderColor = "#02075d",
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };

        if (data != null)
        {
            _barChartConfig.Data.Labels.AddRange(data[0].GetDateFormat(data));
            countJFK = (data[0].Temperatures(data, "JFK"));
            countLGA = (data[0].Temperatures(data, "LGA"));
            countEWR = (data[0].Temperatures(data, "EWR"));
            _barDataSet11.AddRange(countJFK.Wrap());
            _barDataSet12.AddRange(countLGA.Wrap());
            _barDataSet13.AddRange(countEWR.Wrap());
            _barChartConfig.Data.Datasets.Add(_barDataSet11);
            _barChartConfig.Data.Datasets.Add(_barDataSet12);
            _barChartConfig.Data.Datasets.Add(_barDataSet13);
        }

        if (data2 != null)
        {
            count1JFK = (data2[0].Temperatures(data2, "JFK"));
            count2LGA = (data2[0].Temperatures(data2, "LGA"));
            count3EWR = (data2[0].Temperatures(data2, "EWR"));
            _barDataSet21.AddRange(countJFK.Wrap());
            _barDataSet22.AddRange(countLGA.Wrap());
            _barDataSet23.AddRange(countEWR.Wrap());
        }
        this.StateHasChanged();
    }
}
