@page "/temperatures"

@using ChartJs.Blazor.ChartJS.BarChart
@using ChartJs.Blazor.ChartJS.BarChart.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.Util
@using DataAccessLibrary
@using DataAccessLibrary.Models
@using ChartJs.Blazor.ChartJS.Common.Wrappers

@inject IModel model;

<h3>Temperature Recordings per Origin</h3>
<br>
@if (data == null && data2 == null)
{
    <p>Loading...</p>
}
else
{

    <div class="btn-group d-flex justify-content-center" role="group">
        <button type="button" class="btn btn-secondary" @onclick="ShowAll">Hourly Precise Temperature at Three Origins</button>
        <button type="button" class="btn btn-secondary" @onclick="ShowJFK">Hourly Precise Temperature at JFK</button>
        <button type="button" class="btn btn-secondary" @onclick="ShowAverageAll">Daily Average Temperatures at Three Origins</button>
        <button type="button" class="btn btn-secondary" @onclick="ShowAverageJFK">Daily Average at JFK</button>
    </div>
    <br>
    <ChartJsBarChart @ref="_barChart"
                     Config="@_barChartConfig"
                     Width="600"
                     Height="400" />

    <br>
    <br>

    <h3>Number of Weather Observations per Origin</h3>

    <table class="table table-striped text-center">
        <thead>
            <tr>
                <th>Origin</th>
                <th>Number of Weather Observations</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>JFK</td>
                <td>@countJFK.Count()</td>
            </tr>
            <tr>
                <td>LGA</td>
                <td>@countLGA.Count()</td>
            </tr>
            <tr>
                <td>EWR</td>
                <td>@countEWR.Count()</td>
            </tr>
        </tbody>
    </table>
    <br>
    <br>
}

@code {
    private List<FlightModel> data;
    private List<FlightModel> data2;

    private bool change = true;
    private bool change1 = true;

    private BarConfig _barChartConfig;
    private ChartJsBarChart _barChart;
    private BarDataset<DoubleWrapper> _barDataSet11, _barDataSet12, _barDataSet13,
        _barDataSet111, _barDataSet222, _barDataSet21, _barDataSet22, _barDataSet23;

    private double[] countJFK, countLGA, countEWR;
    private double[] count1JFK, count2LGA, count3EWR;

    //Show the temperature at JFK
    public void ShowJFK()
    {
        _barChartConfig.Data.Labels.Clear();
        _barChartConfig.Data.Datasets.Clear();

        _barChartConfig.Options.Title.Text = "Hourly Precise Temperature at JFK";
        _barChartConfig.Data.Labels.AddRange(data[0].GetDateFormat(data));

        _barChartConfig.Data.Datasets.Add(_barDataSet111);

    }

    //Show the daily average temperature at JFK
    public void ShowAverageJFK()
    {
        _barChartConfig.Data.Labels.Clear();
        _barChartConfig.Data.Datasets.Clear();

        _barChartConfig.Options.Title.Text = "Daily Mean Temperatures at JFK (Month/Day)";
        _barChartConfig.Data.Labels.AddRange(data2[0].GetMeanDateFormat(data2));

        _barChartConfig.Data.Datasets.Add(_barDataSet222);
    }

    //Show All Temperature Attributes
    public void ShowAll()
    {
        _barChartConfig.Data.Labels.Clear();
        _barChartConfig.Data.Datasets.Clear();

        _barChartConfig.Options.Title.Text = "Hourly Precise Temperatures at Three Origins 2013";
        _barChartConfig.Data.Labels.AddRange(data[0].GetDateFormat(data));

        _barChartConfig.Data.Datasets.Add(_barDataSet11);
        _barChartConfig.Data.Datasets.Add(_barDataSet12);
        _barChartConfig.Data.Datasets.Add(_barDataSet13);

    }

    //Show Daily Average Temperatures
    public void ShowAverageAll()
    {
        _barChartConfig.Data.Labels.Clear();
        _barChartConfig.Data.Datasets.Clear();

        _barChartConfig.Options.Title.Text = "Daily Mean Temperatures in 2013 (Month/Day)";
        _barChartConfig.Data.Labels.AddRange(data2[0].GetMeanDateFormat(data2));

        _barChartConfig.Data.Datasets.Add(_barDataSet21);
        _barChartConfig.Data.Datasets.Add(_barDataSet22);
        _barChartConfig.Data.Datasets.Add(_barDataSet23);
    }

    protected override async Task OnInitializedAsync()
    {
        data = await model.TempPerOriginAsync();
        data2 = await model.MeanTempPerOriginAsync();

        _barChartConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Hourly Precise Temperatures at Three Origins 2013"
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
{
                        new BarCategoryAxis
                        {
                            BarThickness = BarThickness.Flex,
                            Stacked = true,
                        }
                    },
                    YAxes = new List<CartesianAxis>
{
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                BeginAtZero = true
                            }
                        }
                    }
                }
            }
        };
        _barDataSet11 = new BarDataset<DoubleWrapper>
        {
            Label = "JFK",
            BackgroundColor = "#96ded1",
            BorderWidth = 0,
            HoverBackgroundColor = "#96ded1",
            HoverBorderColor = "#96ded1",
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };
        _barDataSet12 = new BarDataset<DoubleWrapper>
        {
            Label = "LGA",
            BackgroundColor = "#b284be",
            BorderWidth = 0,
            HoverBackgroundColor = "#b284be",
            HoverBorderColor = "#b284be",
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };
        _barDataSet13 = new BarDataset<DoubleWrapper>
        {
            Label = "EWR",
            BackgroundColor = "#02075d",
            BorderWidth = 0,
            HoverBackgroundColor = "#02075d",
            HoverBorderColor = "#02075d",
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };

        _barDataSet21 = new BarDataset<DoubleWrapper>
        {
            Label = "JFK",
            BackgroundColor = "#96ded1",
            BorderWidth = 0,
            HoverBackgroundColor = "#96ded1",
            HoverBorderColor = "#96ded1",
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };
        _barDataSet22 = new BarDataset<DoubleWrapper>
        {
            Label = "LGA",
            BackgroundColor = "#b284be",
            BorderWidth = 0,
            HoverBackgroundColor = "#b284be",
            HoverBorderColor = "#b284be",
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };
        _barDataSet23 = new BarDataset<DoubleWrapper>
        {
            Label = "EWR",
            BackgroundColor = "#02075d",
            BorderWidth = 0,
            HoverBackgroundColor = "#02075d",
            HoverBorderColor = "#02075d",
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };
        _barDataSet111 = new BarDataset<DoubleWrapper>
        {
            Label = "Temperature in Celsius",
            BackgroundColor = "#96ded1",
            BorderWidth = 0,
            HoverBackgroundColor = "#96ded1",
            HoverBorderColor = "#96ded1",
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };
        _barDataSet222 = new BarDataset<DoubleWrapper>
        {
            Label = "Temperature in Celsius",
            BackgroundColor = "#96ded1",
            BorderWidth = 0,
            HoverBackgroundColor = "#96ded1",
            HoverBorderColor = "#96ded1",
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };


        if (data != null)
        {
            _barChartConfig.Data.Labels.AddRange(data[0].GetDateFormat(data));
            countJFK = (data[0].Temperatures(data, "JFK"));
            countLGA = (data[0].Temperatures(data, "LGA"));
            countEWR = (data[0].Temperatures(data, "EWR"));
            _barDataSet11.AddRange(countJFK.Wrap());
            _barDataSet12.AddRange(countLGA.Wrap());
            _barDataSet13.AddRange(countEWR.Wrap());
            _barChartConfig.Data.Datasets.Add(_barDataSet11);
            _barChartConfig.Data.Datasets.Add(_barDataSet12);
            _barChartConfig.Data.Datasets.Add(_barDataSet13);

            _barDataSet111.AddRange(countJFK.Wrap());
        }

        if (data2 != null)
        {
            count1JFK = (data2[0].Temperatures(data2, "JFK"));
            count2LGA = (data2[0].Temperatures(data2, "LGA"));
            count3EWR = (data2[0].Temperatures(data2, "EWR"));
            _barDataSet21.AddRange(count1JFK.Wrap());
            _barDataSet22.AddRange(count2LGA.Wrap());
            _barDataSet23.AddRange(count3EWR.Wrap());

            _barDataSet222.AddRange(count1JFK.Wrap());
        }
        this.StateHasChanged();
    }
}
